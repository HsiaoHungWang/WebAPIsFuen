@{
    ViewData["Title"] = "Chatroom";
}

<div class="row">
    <div class="col-2"></div>
    <div class="col-8">
        <div class="card text-bg-success">
            <div class="card-header  d-flex justify-content-between align-items-center">
                <span>聊天室</span>
                <div class="input-group  w-50">
                    <i class="bi bi-person-fill input-group-text"></i>
                    <input type="text" id="userName" class="form-control w-50" placeholder="姓名">
                    <input type="button" value="加入" id="buttonToggle" class="form-control btn btn-primary" />
                </div>


            </div>
            <div class="card-body message-container">
         

            </div>
        </div>

    </div>
    <div class="col-2"></div>
</div>
<div class="row mt-3">
    <div class="col-2"></div>
    <div class="col-7">
        <input type="text" id="message" class="form-control" placeholder="請輸入訊息" />
    </div>

    <div class="col-1"><input type="button" id="buttonSend" value="發送" class="btn btn-primary" /></div>
    <div class="col-2"></div>
</div>
@section Scripts {
    <script>
        const btnToggle = document.querySelector('#buttonToggle');
        const txtName = document.querySelector('#userName');
        const messageBody = document.querySelector('.card-body');
        const btnSend = document.querySelector('#buttonSend');
        const inpMessage = document.querySelector('#message');
        let socket;
        let theName = "";
        const wsUrl = 'wss://localhost:7175/ws';

        //加入聊天室
        btnToggle.addEventListener('click', event => {
            theName = txtName.value ? txtName.value : "Guest";

            if (event.target.value === "加入") {
                event.target.value = "離開";
                //todo 建立WebSocket物件
                socket = new WebSocket(wsUrl);

                //todo 接收WebSocket傳送過來的資料事件
                socket.onmessage = (event) => {
                    showMessage(JSON.parse(event.data));
                };
                //todo 連線建立成功事件
                socket.onopen = (event) => {                
                    const datas = { "userName": theName, "messageContent": "登入聊天室" };                  
                    sendMessage(JSON.stringify(datas));
                };
                //todo 關閉WebSocket連線事件
                socket.onclose= (event) => {
                    console.log(event);
                };

                //todo WebSocket連線發生錯誤事件
                socket.onerror= (error) => {
                    console.error(error);
                };
            } else {
                event.target.value = "加入";
                //todo 關閉WebSocket連線
                socket.close();
            }
        })

        //傳送訊息到聊天室
        btnSend.addEventListener('click', () => {
            const data = {
                userName: theName,
                messageContent: inpMessage.value
            }
            sendMessage(JSON.stringify(data));
            inpMessage.value = "";
        })

        //顯示聊天室的訊息
        function showMessage(data) {
            const htmlMessage = `
                                      <div style="display: flex;align-items: flex-end;">
                                            <div class="message">
                                                <div class="username">${data.UserName}：</div>
                                                <p>${data.MessageContent}</p>
                                            </div>
                                            <small class="mb-2 text-info">${formatTime(data.Timestamp)}</small>
                                        </div>
                            `
            messageBody.insertAdjacentHTML('beforeend', htmlMessage);

        }
        //傳送訊息到聊天室
        function sendMessage(message) {
            if (socket && socket.readyState == WebSocket.OPEN) {
                //todo 將訊息傳遞給 WebSocket Server
                socket.send(message);
            }else{
                alert("請先加入聊天室");
            }
        }

        //格式化顯示的時間
        function formatTime(strDate) {
            const theDate = new Date(strDate);
            return (theDate.toLocaleString([], {
                hour: '2-digit',
                minute: '2-digit'
            }));
        }

    </script>
}

@section Styles {
    <style>
        .message-container {
            display: flex;
            flex-direction: column;
        }

        .message {
            display: flex;
            justify-content: space-between; 
            margin-bottom: 10px; 
            padding: 10px;
            border-radius: 10px;
            max-width: 80%; 
            background-color: #DCF8C6;
        }

        .username {
            font-weight: bold;
            margin-right: 5px;
        }

        small {
            font-size: smaller;
        }
    </style>
}